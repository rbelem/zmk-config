/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */


#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>
 
#define CMK 0
#define SYM 1
#define NUM 2
#define NAV 3
#define FUN 4
#define DAN 5
#define LCK 6

&caps_word {
   continue-list = <UNDERSCORE MINUS BACKSPACE>;
};


/ {

    combos {
        #include "combos.dtsi"    
    };

    behaviors {
        skq: sticky_key_quick_release {
            compatible = "zmk,behavior-sticky-key";
            label = "STICKY_KEY_QUICK_RELEASE";
            #binding-cells = <1>;
            bindings = <&kp>;
            release-after-ms = <1000>;
            quick-release;
        };
    };
};

/*           34 Keys
╭──────────────╮ ╭──────────────╮
│ 0  1  2  3  4│ │ 5  6  7  8  9│
│10 11 12 13 14│ │15 16 17 18 19│
│20 21 22 23 24│ │25 26 27 28 29│
╰────────╮30 31│ │32 33╭────────╯
         ╰─────╯ ╰─────╯         */


/ {
        keymap {
                compatible = "zmk,keymap";
                colemak_layer {
// -----------------------------------------------------------------
// |  Q  |  W  |  F  |  P  |  B  | |  J  |  L  |  U  |  Y  |     |
// |  A  |  R  |  S  |  T  |  G  | |  M  |  N  |  E  |  I  |  O  |
// |  Z  |  X  |  C  |  D  |  V  | |  K  |  H  |  ,  |  .  |-FUN-|
//                   |-SYM-| SPC | | RET |-NUM-|
                        bindings = <
   &kp Q &kp W &kp F &kp P &kp B &kp J &kp L   &kp U     &kp Y   &none
   &kp A &kp R &kp S &kp T &kp G &kp M &kp N   &kp E     &kp I   &kp O
   &kp Z &kp X &kp C &kp D &kp V &kp K &kp H   &kp COMMA &kp DOT &mo FUN
                   &mo SYM &kp SPACE &kp RET &mo NUM
                        >;
                };
                symbol_layer {
// -----------------------------------------------------------------
// |     |  \  |  %  |  $  |     | |     |  ^  |  {  |  }  |     |
// |  *  |  (  |  )  |  :  |     | |     |  "  |  [  |  ]  |  ;  |
// |     |  `  |  @  |  &  |     | |     |  #  |  <  |  >  |-FUN-|
//                   |_SYM_| SPC | | RET | ESC |
                        bindings = <
   &none  &kp BSLH &kp PRCNT &kp DLLR  &none &none &kp CARET &kp LBRC &kp RBRC &none
   &kp STAR &kp LPAR &kp RPAR  &kp COLON &none &none &kp DQT   &kp LBKT &kp RBKT &kp SEMI
   &mo FUN  &kp GRAVE   &kp AT  &kp AMPS  &none &none &kp HASH &kp LT   &kp GT   &kp DEL
                             &trans &kp SPACE &kp RET &kp ESC
                        >;
                };
                number_layer {
// -----------------------------------------------------------------
// |     |  4  |  5  |  6  |     | |     |  |  |  -  |  /  |     |
// |  .  |  1  |  2  |  3  |     | |     |  '  |  _  |  =  |-NAV-|
// |  ~  |  7  |  8  |  9  |     | |     |  +  |  ?  |  !  |     |
//                   |  0  | SPC | | RET |_NUM_|
                        bindings = <
   &kp BSPC  &kp N4 &kp N5 &kp N6 &none &none &kp PIPE &kp MINUS &kp FSLH  &none
   &kp DOT &kp N1 &kp N2 &kp N3 &none &none &kp SQT  &kp UNDER &kp EQUAL &mo NAV  
   &kp TILDE  &kp N7 &kp N8 &kp N9 &none &none &kp PLUS &kp QMARK  &kp EXCL    &none
                 &kp N0 &kp SPACE &kp RET  &trans
                        >;
                };
                nav_layer {
// -----------------------------------------------------------------
// |     |     |     |     |     | |     |     |     |     |     |
// |     |     |     |     |     | | LFT | DWN | U P |RIGHT|_NAV_|
// |     |     |     |     |     | | HOM |PG_DN|PG_UP| END |     |
//                   |     | SPC | | RET |_NUM_|
                        bindings = <
   &none &none &none &none &none &none    &none     &none     &none     &none 
   &none &none &none &none &none &kp LEFT &kp DOWN  &kp UP    &kp RIGHT &trans  
   &none &none &none &none &none &kp HOME &kp PG_DN &kp PG_UP &kp END   &none 
                         &none &trans &trans &trans
                        >;
                };
                fun_layer {
// -----------------------------------------------------------------
// |     | F 6 | F 5 | F 4 | F10 | | <!> | <!> | <!> | <!> |     |
// |CAPSL| F 3 | F 2 | F 1 | F11 | | BT2 |VMUTE|VOLDN|VOLUP| <!> |
// |-!!!-| F 9 | F 8 | F 7 | F12 | | BT0 | BT1 |BRIDN|BRIUP|_FUN_|
//                   |     | SPC | | RET |     |
                        bindings = <
   &none &kp F6 &kp F5 &kp F4 &kp F10 &none &none &none &none &none
   &kp CAPS &kp F3   &kp F2 &kp F1 &kp F11 &bt BT_SEL 2 &kp K_MUTE &kp C_VOL_DN &kp C_VOL_UP &none
   &mo DAN &kp F9 &kp F8 &kp F7  &kp F12 &bt BT_SEL 0  &bt BT_SEL 1 &kp C_BRI_DN &kp C_BRI_UP &trans
                         &none &trans &trans &none 
                        >;
                };
                danger_layer {
// -----------------------------------------------------------------
// |     |     |     |     |     | |BTCLR| BLE | USB |RESET|     |
// |     |     |     |     |     | |     |     |     |     |BOOTL|
// |_!!!_|     |     |     |     | |     |     |     |     |_FUN_|
//                   |     |     | |     |     |
                    // impactful buttons
                    // Bluetooth clear, reset, chaning BLE/USB preference, bootloader
                    bindings = <
&none &none &none &none &none &bt BT_CLR  &out OUT_BLE &out OUT_USB &reset &none
&none &none &none &none &none &none &none &none &none &bootloader
&trans &none &none &none &none &none &none &none &none &trans
&none &none &none &none
                    >;
                };
                lock_layer {
                    // only way out is the lock combo
                    // other combos are disabled too
                    bindings = <
&none &none &none &none &none &none &none &none &none &none 
&none &none &none &none &none &none &none &none &none &none 
&none &none &none &none &none &none &none &none &none &none 
&none &none &none &none 
                    >;
                };
        };
};
