/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */


#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/mouse.h>

#define BR_GRAVE LS(LBKT)
#define BR_QUOTE GRAVE
#define BR_TILDE QUOT
#define BR_SEMI SLASH
#define BR_LBKT RBKT
#define BR_RBKT BSLH
#define BR_SLASH (ZMK_HID_USAGE(HID_USAGE_KEY, HID_USAGE_KEY_KEYBOARD_INTERNATIONAL1))
#define BR_BSLH NON_US_BSLH

#define AS(keycode) &as LS(keycode) keycode // Autoshift Macro

#define BAS 0
#define LMD 1
#define RMD 2
#define NUM 3
#define SYM 4
#define NAV 5
#define MOS 6
#define FUN 7
#define DAN 8

&caps_word {
  continue-list = <UNDERSCORE MINUS BACKSPACE>;
};

&mt {
  tapping-term-ms = <300>;
};

&sl {
  release-after-ms = <3000>;
};

/ {
  combos {
    #include "combos.dtsi"
  };

  behaviors {
    as: auto_shift {
      compatible = "zmk,behavior-hold-tap";
      label = "AUTO_SHIFT";
      #binding-cells = <2>;
      tapping_term_ms = <135>;
      quick_tap_ms = <0>;
      flavor = "tap-preferred";
      bindings = <&kp>, <&kp>;
    };
  };
};

/*           34 Keys
╭──────────────╮ ╭──────────────╮
│ 0  1  2  3  4│ │ 5  6  7  8  9│
│10 11 12 13 14│ │15 16 17 18 19│
│20 21 22 23 24│ │25 26 27 28 29│
╰────────╮30 31│ │32 33╭────────╯
         ╰─────╯ ╰─────╯         */

/ {
  keymap {
    compatible = "zmk,keymap";

    qwerty_layer {
// -----------------------------------------------------------------
// |  Q  |  W  |  E  |  R  |  T  | |  Y  |  U  |  I  |  O  |  P  |
// |  A  |  S  |  D  |  F  |  G  | |  H  |  J  |  K  |  L  |  ~  |
// |  Z  |  X  |  C  |  V  |  B  | |  N  |  M  |  ,  |  .  |  ;  |
//                   |-LMD-| SPC | | ESC |-RMD-|
      bindings = <
&kp Q &kp W &kp E &kp R &kp T &kp Y &kp U &kp I     &kp O   &kp P
&kp A &kp S &kp D &kp F &kp G &kp H &kp J &kp K     &kp L   &kp BR_TILDE
&kp Z &kp X &kp C &kp V &kp B &kp N &kp M &kp COMMA &kp DOT &kp BR_SEMI
&sl LMD &mt LSHFT SPACE &mt RALT LCTL &sl RMD
      >;
    };

    lmod_layer {
// -----------------------------------------------------------------
// | MOS | NAV | SYM | NUM | FUN | |     |     |     |     |     |
// |L GUI|L ALT|L CTL|LSHFT|     | |     |     |     |     |     |
// |     |     |     |     |     | |     |     |     |     |     |
//                   |_LMD_|     | |     |     |
      bindings = <
&mo MOS  &mo NAV  &sl SYM  &sl NUM   &sl FUN &trans &trans &trans &trans &trans
&sk LGUI &sk LALT &sk LCTL &sk LSHFT &trans  &trans &trans &trans &trans &trans
&trans   &trans   &trans   &trans    &trans  &trans &trans &trans &trans &trans
&trans &trans &trans &trans
      >;
    };

     rmod_layer {
// -----------------------------------------------------------------
// |     |     |     |     |     | | FUN | NUM | SYM | NAV | MOS |
// |     |     |     |     |     | |     |RSHFT|R CTL|R ALT|R GUI|
// |     |     |     |     |     | |     |     |     |     |     |
//                   |     |     | |     |_RMD_|
      bindings = <
&trans &trans &trans &trans &trans &sl FUN &sl NUM   &sl SYM  &sl NAV  &sl MOS
&trans &trans &trans &trans &trans &trans  &sk RSHFT &sk RCTL &sk RALT &sk RGUI
&trans &trans &trans &trans &trans &trans  &trans    &trans   &trans   &trans
&trans &trans &trans &trans
      >;
    };

   number_layer {
// -----------------------------------------------------------------
// |  1  |  2  |  3  |  4  |  5  | |  6  |  7  |  8  |  9  |  0  |
// |     |     |     |     |     | |     |  -  |  =  |  `  |  '  |
// |     |     |     |     |     | |     |  [  |  ]  |  \  |  /  |
//                   |     |LSHFT| |     |     |
      bindings = <
&kp N1 &kp N2 &kp N3 &kp N4 &kp N5 &kp N6 &kp N7      &kp N8      &kp N9       &kp N0
&none  &none  &none  &none  &none  &none  &kp MINUS   &kp EQUAL   &kp BR_GRAVE &kp BR_QUOTE
&none  &none  &none  &none  &none  &none  &kp BR_LBKT &kp BR_RBKT &kp BR_BSLH  &kp BR_SLASH
&sl LMD &mt LSHFT SPACE &mt RALT LCTL &sl RMD
      >;
    };

   symbol_layer {
// -----------------------------------------------------------------
// |  !  |  @  |  #  |  $  |  %  | |  ¨  |  &  |  *  |  (  |  )  |
// |     |     |     |     |     | |     |  _  |  +  |  `  |  "  |
// |     |     |     |     |     | |     |  {  |  }  |  \  |  /  |
//                   |     |LSHFT| |     |     |
      bindings = <
&kp LS(N1) &kp LS(N2) &kp LS(N3) &kp LS(N4) &kp LS(N5) &kp LS(N6) &kp LS(N7)      &kp LS(N8)      &kp LS(N9)       &kp LS(N0)
&none      &none      &none      &none      &none      &none      &kp LS(MINUS)   &kp LS(EQUAL)   &kp LS(BR_GRAVE) &kp LS(BR_QUOTE)
&none      &none      &none      &none      &none      &none      &kp LS(BR_LBKT) &kp LS(BR_RBKT) &kp LS(BR_BSLH)  &kp LS(BR_SLASH)
&sl LMD &mt LSHFT SPACE &mt RALT LCTL &sl RMD
      >;
    };

    nav_layer {
// -----------------------------------------------------------------
// |     |     |     |     |     | | PRV | STP | P P | NXT |     |
// |     |     |     |     |     | | LFT | DWN | U P |RIGHT|     |
// |     |     |     |     |     | | HOM |PG_DN|PG_UP| END |     |
//                   | TAB | SPC | | ESC |_NAV_|
      bindings = <
&none &none &none &none &none &kp C_PREV &kp C_STOP &kp C_PP  &kp C_NEXT &none
&none &none &none &none &none &kp LEFT   &kp DOWN   &kp UP    &kp RIGHT  &none
&none &none &none &none &none &kp HOME   &kp PG_DN  &kp PG_UP &kp END    &none
&sl LMD &mt LSHFT SPACE &mt RALT LCTL &sl RMD
      >;
    };

    mouse_layer {
// -----------------------------------------------------------------
// |     |     |     |     |     | |SCR L|SCRDN|SCRUP|SCR R|     |
// |     |     |     |     |     | |MOV L|MOVDN|MOVUP|MOV R|     |
// |     |     |     |     |     | |     |LCLK |MCLK |RCLK |     |
//                   |_NUM_|LSHFT| | ESC |_MOS_|
      bindings = <
&none &none &none &none &none &mwh SCROLL_LEFT &mwh SCROLL_DOWN &mwh SCROLL_UP &mwh SCROLL_RIGHT &none
&none &none &none &none &none &mmv MOVE_LEFT   &mmv MOVE_DOWN   &mmv MOVE_UP   &mmv MOVE_RIGHT   &none
&none &none &none &none &none &none            &mkp LCLK        &mkp MCLK      &mkp RCLK         &none
&sl LMD &mt LSHFT SPACE &mt RALT LCTL &sl RMD
      >;
    };

    fun_layer {
// -----------------------------------------------------------------
// |     | F 6 | F 5 | F 4 | F10 | |     |BRIDN|BRIUP|     | BT0 |
// |     | F 3 | F 2 | F 1 | F11 | |VMUTE|VOLDN|VOLUP|     | BT1 |
// |-!!!-| F 9 | F 8 | F 7 | F12 | |PREV |STOP |PLAY |NEXT | BT2 |
//                   |_NUM_|LSHFT| | ESC |-MOS-|
      bindings = <
&none   &kp F6 &kp F5 &kp F4 &kp F10 &none      &kp C_BRI_DN &kp C_BRI_UP &none      &bt BT_SEL 0
&none   &kp F3 &kp F2 &kp F1 &kp F11 &kp K_MUTE &kp C_VOL_DN &kp C_VOL_UP &none      &bt BT_SEL 1
&mo DAN &kp F9 &kp F8 &kp F7 &kp F12 &kp C_PREV &kp C_STOP   &kp C_PP     &kp C_NEXT &bt BT_SEL 2
&trans &trans &trans &trans
      >;
    };

    danger_layer {
// -----------------------------------------------------------------
// |     |     |     |     |     | |BTCLR| BLE | USB |RESET|     |
// |     |     |     |     |     | |     |     |     |     |BOOTL|
// |_!!!_|     |     |     |     | |     |     |     |     |_FUN_|
//                   |     |     | |     |     |
      // impactful buttons
      // Bluetooth clear, reset, chaning BLE/USB preference, bootloader
      bindings = <
&none  &none &none &none &none &bt BT_CLR  &out OUT_BLE &out OUT_USB &reset &none
&none  &none &none &none &none &none &none &none &none &bootloader
&trans &none &none &none &none &none &none &none &none &none
&none &none &none &none
      >;
    };
  };
};
